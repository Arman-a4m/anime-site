#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Anime Catalog Web Application
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–Ω–∏–º–µ
"""

import json
import logging
import os
import random
from typing import List, Dict, Optional, Any
from flask import Flask, render_template, request, abort, jsonify
from flask_talisman import Talisman
from werkzeug.exceptions import HTTPException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config.update(
    SECRET_KEY=os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production'),
    JSON_AS_ASCII=False,
    JSONIFY_PRETTYPRINT_REGULAR=True
)

# üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS, clickjacking –∏ –¥—Ä.)
Talisman(
    app, 
    content_security_policy={
        'default-src': ["'self'"],
        'img-src': ["'self'", "data:", "https:", "http:"],
        'script-src': ["'self'", "'unsafe-inline'"],
        'style-src': ["'self'", "'unsafe-inline'"],
        'font-src': ["'self'", "https:", "data:"],
        'connect-src': ["'self'"],
        'media-src': ["'self'", "https:"],
        'frame-src': ["'self'", "https://www.youtube.com", "https://youtube.com"]
    },
    force_https=False  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ True –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
)

class AnimeCatalog:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∞–Ω–∏–º–µ"""
    
    def __init__(self, file_path: str = 'templates/anime.json'):
        self.file_path = file_path
        self._cache = None
        self._cache_timestamp = 0
    
    def load_anime(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∞–Ω–∏–º–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if self._cache is None:
                with open(self.file_path, 'r', encoding='utf-8') as file:
                    self._cache = json.load(file)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._cache)} –∞–Ω–∏–º–µ –∏–∑ —Ñ–∞–π–ª–∞")
            return self._cache
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {self.file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return []
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∏–º–µ: {e}")
            return []
    
    def get_random_anime(self, limit: int = 6) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∏–º–µ"""
        anime_list = self.load_anime()
        return random.sample(anime_list, min(len(anime_list), limit))
    
    def search_anime(self, query: str = "", genre: str = "", year: str = "", 
                    status: str = "", studio: str = "") -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∏–º–µ"""
        anime_list = self.load_anime()
        result = []
        
        for anime in anime_list:
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            title = anime.get("title", "").lower()
            original = anime.get("title_original", "").lower()
            english = anime.get("title_english", "").lower()
            
            if query and query not in title and query not in original and query not in english:
                continue
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä—É
            if genre and genre not in anime.get("genre", []):
                continue
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É
            if year and str(anime.get("year")) != year:
                continue
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if status and anime.get("status") != status:
                continue
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—É–¥–∏–∏
            if studio and anime.get("studio") != studio:
                continue
            
            result.append(anime)
        
        return result
    
    def get_anime_by_title(self, title: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        anime_list = self.load_anime()
        title_lower = title.lower()
        
        for anime in anime_list:
            if (anime.get("title", "").lower() == title_lower or
                anime.get("title_english", "").lower() == title_lower):
                return anime
        return None
    
    def get_recommendations(self, anime: Dict[str, Any], limit: int = 6) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–æ–≤"""
        anime_list = self.load_anime()
        anime_genres = set(anime.get("genre", []))
        
        recommendations = []
        for a in anime_list:
            if a.get("title") != anime.get("title"):
                common_genres = set(a.get("genre", [])) & anime_genres
                if common_genres:
                    recommendations.append({
                        'anime': a,
                        'common_genres': len(common_genres),
                        'score': len(common_genres) / len(anime_genres) if anime_genres else 0
                    })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        recommendations.sort(key=lambda x: x['score'], reverse=True)
        return [r['anime'] for r in recommendations[:limit]]
    
    def get_filter_options(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        anime_list = self.load_anime()
        
        return {
            'genres': sorted({g for a in anime_list for g in a.get("genre", [])}),
            'years': sorted({str(a.get("year")) for a in anime_list if a.get("year")}),
            'statuses': sorted({a.get("status") for a in anime_list if a.get("status")}),
            'studios': sorted({a.get("studio") for a in anime_list if a.get("studio")})
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
catalog = AnimeCatalog()

@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        featured_anime = catalog.get_random_anime(6)
        return render_template("index.html", anime_list=featured_anime)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        return render_template("index.html", anime_list=[])

@app.route("/catalog")
def catalog_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        query = request.args.get("q", "").strip()
        genre = request.args.get("genre", "")
        year = request.args.get("year", "")
        status = request.args.get("status", "")
        studio = request.args.get("studio", "")
        
        # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        filtered_anime = catalog.search_anime(query, genre, year, status, studio)
        
        # –û–ø—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_options = catalog.get_filter_options()
        
        return render_template(
            "catalog.html",
            anime=filtered_anime,
            genres=filter_options['genres'],
            years=filter_options['years'],
            statuses=filter_options['statuses'],
            studios=filter_options['studios'],
            current_filters={
                'query': query,
                'genre': genre,
                'year': year,
                'status': status,
                'studio': studio
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {e}")
        return render_template("catalog.html", anime=[], error="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")

@app.route("/anime/<title>")
def anime_page(title):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∏–º–µ"""
    try:
        anime = catalog.get_anime_by_title(title)
        
        if not anime:
            abort(404, description="–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = catalog.get_recommendations(anime, 6)
        
        return render_template("anime.html", anime=anime, recommendations=recommendations)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–Ω–∏–º–µ {title}: {e}")
        abort(500, description="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.route("/api/anime")
def api_anime():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ"""
    try:
        anime_list = catalog.load_anime()
        return jsonify({
            'success': True,
            'count': len(anime_list),
            'data': anime_list
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
        }), 500

@app.route("/api/anime/<title>")
def api_anime_detail(title):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ"""
    try:
        anime = catalog.get_anime_by_title(title)
        
        if not anime:
            return jsonify({
                'success': False,
                'error': '–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        return jsonify({
            'success': True,
            'data': anime
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è {title}: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@app.errorhandler(404)
def not_found_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 404"""
    return render_template('errors/404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 500"""
    logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error}")
    return render_template('errors/500.html'), 500

@app.errorhandler(Exception)
def handle_exception(e):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    return render_template('errors/500.html'), 500

@app.context_processor
def inject_globals():
    """–í–Ω–µ–¥—Ä—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω—ã"""
    return {
        'app_name': 'Anime Catalog',
        'app_version': '1.0.0'
    }

if __name__ == "__main__":
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    port = int(os.environ.get('PORT', 5000))
    
    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    debug = os.environ.get('FLASK_ENV') == 'development'
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=debug)

