#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Anime JSON Validator
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ anime.json —Ñ–∞–π–ª–µ
"""

import json
import sys
from typing import Dict, List, Any

def validate_anime_json(file_path: str) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–Ω–∏–º–µ
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        required_fields = [
            'id', 'title', 'title_original', 'title_english', 
            'genre', 'year', 'status', 'studio', 'episodes', 
            'duration', 'age_rating', 'rating', 'description'
        ]
        
        optional_fields = [
            'season', 'characters', 'poster', 'trailers', 
            'source', 'aired', 'broadcast', 'licensors', 
            'producers', 'director', 'music'
        ]
        
        errors = []
        warnings = []
        
        for i, anime in enumerate(data):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            for field in required_fields:
                if field not in anime:
                    errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
                elif anime[field] is None:
                    errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –ü–æ–ª–µ '{field}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if 'id' in anime and not isinstance(anime['id'], int):
                errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –ü–æ–ª–µ 'id' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
            if 'title' in anime and not isinstance(anime['title'], str):
                errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –ü–æ–ª–µ 'title' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            
            if 'genre' in anime and not isinstance(anime['genre'], list):
                errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –ü–æ–ª–µ 'genre' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º")
            
            if 'year' in anime and not isinstance(anime['year'], int):
                errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –ü–æ–ª–µ 'year' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
            if 'episodes' in anime and not isinstance(anime['episodes'], int):
                errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –ü–æ–ª–µ 'episodes' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
            if 'rating' in anime:
                if not isinstance(anime['rating'], (int, float)):
                    errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –ü–æ–ª–µ 'rating' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                elif anime['rating'] < 0 or anime['rating'] > 10:
                    warnings.append(f"–ó–∞–ø–∏—Å—å {i+1}: –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            if 'id' in anime:
                id_count = sum(1 for a in data if a.get('id') == anime['id'])
                if id_count > 1:
                    errors.append(f"–ó–∞–ø–∏—Å—å {i+1}: –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è ID {anime['id']}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if errors:
            print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
            for error in errors:
                print(f"   {error}")
            return False
        
        if warnings:
            print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")
            for warning in warnings:
                print(f"   {warning}")
        
        print(f"\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
        print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(set(a.get('id') for a in data))}")
        print(f"   - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {sum(a.get('rating', 0) for a in data) / len(data):.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ –∂–∞–Ω—Ä–æ–≤
        all_genres = []
        for anime in data:
            if 'genre' in anime:
                all_genres.extend(anime['genre'])
        
        genre_counts = {}
        for genre in all_genres:
            genre_counts[genre] = genre_counts.get(genre, 0) + 1
        
        print(f"   - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã:")
        for genre, count in sorted(genre_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
            print(f"     {genre}: {count}")
        
        return True
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    file_path = "templates/anime.json"
    
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è anime.json —Ñ–∞–π–ª–∞...")
    print("=" * 50)
    
    success = validate_anime_json(file_path)
    
    if success:
        print("\nüéâ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        sys.exit(0)
    else:
        print("\nüí• –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main() 